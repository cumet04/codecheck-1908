projects:
  - title: rails-hello
    url: https://fathomless-castle-41210.herokuapp.com/
    description: >
      コンピュータープログラミングにおける古来の伝統に従い、最初に作るアプリケーションは
      「hello, world」を表示するプログラムにしましょう。具体的には、
      Webページに「Hello, world」という文字列を表示するだけの単純なアプリケーションを、
      開発環境 (1.3.4) と本番環境 (1.5) でそれぞれ作成します。

  - title: rails-toy
    url: https://ancient-scrubland-48556.herokuapp.com/
    description: >
      Toyアプリケーションは、後に作成するサンプルアプリケーションと同様、
      ユーザーと、それに関連しているマイクロポストから成り立っています。
      このToyアプリケーションはもちろん動きますが完成品ではなく、
      しかも多くの手順が「魔法」のように思えるかもしれません。
      第3章以降で作成するサンプルアプリケーションでは同等の機能を
      1つ1つ手動で作成しますので、ご安心ください。その分時間がかかることになりますが、
      どうか最後まで本書にお付き合いいただければと思います。
      本書の目的は、scaffoldを使用した即席のアプローチによる表面的な理解ではなく、
      そこを突破してRailsを深いレベルまで理解することにあります。

  - title: rails-sample
    url: https://hidden-escarpment-90033.herokuapp.com/
    description: >
      本章から、本格的なサンプルアプリケーションの開発を進めていきます。
      残りのチュートリアルでは、このアプリケーションを例題として扱って学習していくことになります。
      本書を通して開発するアプリケーションは、最終的にはユーザーやマイクロポスト、
      ログイン/ログアウトなどの認証機能を持ちますが、まずは簡単なトピックである
      「静的なページの作成」から始めます。非常に単純なページではありますが、
      静的なページを自分の手で作成することは良い経験になり、多くの示唆も得られます。
      私達がこれから開発するアプリケーションにとって最適なスタート地点といえるでしょう。

  - title: codecheck-portfolio
    url: https://portfolio-inomoto.herokuapp.com/
    description: >
      # ポートフォリオを作ろう！（API実装）
      ポートフォリオに載せるプロジェクトの管理をするための Web API を実装しよう！
      ## 前提条件
      このチャレンジは [GitHub](https://github.com) のアカウントと [Heroku](https://heroku.com) でサーバーが立っている事が前提となります。
      始める前に GitHub で[アカウントを作成](https://github.com/join)し、 [Herokuでチャレンジ用のアプリケーションを作って](https://dashboard.heroku.com/new)ください。
      ## データベース
      以下が今回のチャレンジで必要となるデータベースの情報です。
      [database.sql](./specifications/database.sql)にファイルが提供されています。
      ```sql
      -- SQLite3 のフォーマットで書かれています。
      -- 使うデータベースによっては一部修正が必要な場合があります。
      create table projects (
          id integer PRIMARY KEY AUTOINCREMENT,
          url varchar(255) NULL,
          title varchar(255) NOT NULL,
          description text NOT NULL,
          created_at datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
        );
      ```
      ## ステップ 1: account.json の記入
      [account.json](./account.json)の `heroku_appname` の値に実装で使う Heroku のアプリケーション名を入力してください。（`App Name` の項目に入力した内容）  
      ```json
      {
        "heroku_appname": "<App Name>"
      }
      ```
      `<App Name>` の部分を `<` と `>` も含めてアプリケーション名に修正してください。
      ## ステップ 2: テストを実行しつつ、サーバーを実装しよう！
      実装が必要なエンドポイントは次の4つです。  
      このAPIが満たすべき仕様の詳細については [api-first-spec](https://github.com/shunjikonishi/api-first-spec) によって表記されています。仕様が書かれたファイルへのリンクもあるので実際に確認してみてください。
      - GET /api/projects
        - データの取得に成功した場合は `200 OK` を返すこと
        - [GET /api/projects spec](./specifications/localhost/GET-api-projects.spec.js)
      - POST /api/projects
        - title と description のどちらかが空の場合は `400 BadRequest` を返すこと
        - データの生成に成功した場合は `200 OK` を返すこと
        - [POST /api/projects spec](./specifications/localhost/POST-api-projects.spec.js)
      - GET /api/projects/:id
        - データの取得に成功した場合は `200 OK` を返すこと
        - データが取得できなかった場合は `404 NotFound` を返すこと
        - [GET /api/projects/:id spec](./specifications/localhost/GET-api-projects_id.spec.js)
      - DELETE /api/projects/:id
        - データの削除に成功した場合は `200 OK` を返すこと
        - 削除するデータが取得できなかった場合は `404 NotFound` を返すこと
        - [GET /api/projects/:id spec](./specifications/localhost/DELETE-api-projects_id.spec.js)
      ### テストの実行  
      次のコマンドをターミナル上で実行することでローカル環境でのテストが可能です。
      ```bash
      $ npm install                               # モジュールのインストール (初回のみ実行)
      $ $(npm bin)/mocha specifications/localhost  # ローカル環境でのテストの実行
      ```
      実装前は下のように `failing` 状態のテストがあるので、全てのテストを `passing` の状態にできるようにサーバーを実装して下さい。
      ```
      42 passing (16s)
      6 failing
      ```

  - title: qiita
    url: https://qiita.com/
    description: >
      Qiita is a technical knowledge sharing and collaboration platform for programmers.

  - title: github
    url: https://github.com/
    description: >
      GitHub（ギットハブ）はソフトウェア開発プロジェクトのための共有ウェブサービスであり、
      Gitバージョン管理システムを使用する。Ruby on RailsおよびErlangで記述されており、
      GitHub社によって保守されている。主な開発者はChris Wanstrath、PJ Hyett、Tom Preston-Wernerである。
      GitHub商用プランおよびオープンソースプロジェクト向けの無料アカウントを提供している。
      2009年のユーザー調査によると、GitHubは最もポピュラーなGitホスティングサイトとなった[3]。

  - title: google
    url: https://www.google.co.jp/
    description: >
      Google Inc.（グーグル）は、検索エンジン、クラウドコンピューティング、ソフトウェア、
      オンライン広告といったインターネット関連のサービスと製品を提供するアメリカ合衆国の多国籍企業である。
      収益の多くをアドワーズ（AdWords）と呼ばれるオンライン広告から得ている。
